# Enterprise Scaling Configuration
# High availability, load balancing, and horizontal scaling
# Usage: docker compose -f compose.yml -f compose.enterprise.yml up -d

services:
  # Load Balancer / API Gateway
  nginx:
    image: nginx:1.25-alpine
    container_name: ffprobe-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ffprobe-api
    restart: unless-stopped
    networks:
      - ffprobe-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scaled API instances
  ffprobe-api:
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
    environment:
      - INSTANCE_ID={{.Task.Slot}}
      - CLUSTER_MODE=true

  # Dedicated FFprobe Workers (CPU intensive)
  ffprobe-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    deploy:
      replicas: 5
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    environment:
      - WORKER_TYPE=ffprobe
      - WORKER_CONCURRENCY=4
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - uploads_data:/app/uploads:ro
      - temp_data:/app/temp
    networks:
      - ffprobe-network
    restart: unless-stopped

  # Dedicated AI Workers
  ai-worker:
    build:
      context: .
      dockerfile: Dockerfile.ai-worker
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    environment:
      - WORKER_TYPE=ai
      - OLLAMA_URL=http://ollama:11434
      - REDIS_HOST=redis
    depends_on:
      - ollama
      - redis
    networks:
      - ffprobe-network
    restart: unless-stopped

  # High-performance PostgreSQL cluster
  postgres:
    image: postgres:16.1-alpine
    environment:
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=1GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=3GB
      - POSTGRES_WORK_MEM=16MB
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis Cluster for high availability
  redis:
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-dev_redis_pass}
      --maxmemory 1500mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  # Scaled Ollama instances
  ollama:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 6G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_NUM_PARALLEL=8
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_MAX_QUEUE=256

  # Enhanced monitoring stack
  prometheus:
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--query.max-concurrency=50'

  grafana:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Message Queue for async tasks
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: ffprobe-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-ffprobe}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-secure_rabbit_pass}
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.7
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ffprobe-network
    restart: unless-stopped

# Additional volumes for enterprise features
volumes:
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/nginx
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/rabbitmq

# Enterprise network configuration
networks:
  ffprobe-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/16