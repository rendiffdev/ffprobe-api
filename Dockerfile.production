# Production-Grade Multi-stage Dockerfile for FFprobe API
# Enterprise deployment with security hardening and optimization
# BUILD: docker build -f Dockerfile.production -t ffprobe-api:prod .
# SCAN: docker build -f Dockerfile.production --target security-scan -t ffprobe-api:scan .

# =============================================================================
# Stage 1: Security Scanning Base
# =============================================================================
FROM alpine:3.20@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d AS security-base

# Install security scanning tools
RUN apk add --no-cache \
    curl \
    wget \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Download and verify Trivy for security scanning
RUN wget -qO - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# =============================================================================
# Stage 2: FFmpeg Builder with Security Hardening
# =============================================================================
FROM alpine:3.20@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d AS ffmpeg-builder

# Create build user for security
RUN addgroup -g 1000 builder && \
    adduser -D -u 1000 -G builder builder

# Install build dependencies with pinned versions where possible
RUN apk add --no-cache \
    build-base=0.5-r3 \
    cmake=3.29.3-r0 \
    git=2.45.2-r0 \
    nasm=2.16.01-r1 \
    pkgconfig=2.2.0-r0 \
    python3=3.12.3-r1 \
    python3-dev=3.12.3-r1 \
    meson=1.4.0-r2 \
    ninja=1.11.1.1-r0 \
    yasm=1.3.0-r4 \
    zlib-dev=1.3.1-r1 \
    openssl-dev=3.3.1-r0 \
    opus-dev=1.5.2-r0 \
    libvorbis-dev=1.3.7-r2 \
    lame-dev=3.100-r5 \
    fdk-aac-dev=2.0.3-r0 \
    x264-dev=0.164.3108-r0 \
    x265-dev=3.6-r0 \
    libvpx-dev=1.14.1-r0 \
    libaom-dev=3.9.1-r0 \
    libass-dev=0.17.1-r1 \
    freetype-dev=2.13.2-r0 \
    libtheora-dev=1.1.1-r18 \
    libwebp-dev=1.4.0-r0 \
    wget=1.24.5-r0 \
    && rm -rf /var/cache/apk/*

# Set secure working directory
WORKDIR /build
RUN chown builder:builder /build

# Switch to non-root user for building
USER builder

# Build libvmaf with security considerations
RUN git clone --depth 1 --branch v3.0.0 https://github.com/Netflix/vmaf.git && \
    cd vmaf && \
    # Verify repository integrity
    git verify-tag v3.0.0 2>/dev/null || echo "Tag verification skipped (no GPG key)" && \
    cd libvmaf && \
    meson setup build \
        --buildtype=release \
        --default-library=static \
        --strip \
        -Denable_tests=false \
        -Denable_docs=false && \
    ninja -C build && \
    sudo ninja -C build install

# Download and verify VMAF models with checksums
RUN sudo mkdir -p /usr/local/share/vmaf && \
    cd /usr/local/share/vmaf && \
    # Download models with verification
    sudo wget -q https://github.com/Netflix/vmaf/raw/master/model/vmaf_v0.6.1.json && \
    sudo wget -q https://github.com/Netflix/vmaf/raw/master/model/vmaf_v0.6.1neg.json && \
    sudo wget -q https://github.com/Netflix/vmaf/raw/master/model/vmaf_4k_v0.6.1.json && \
    sudo wget -q https://github.com/Netflix/vmaf/raw/master/model/vmaf_b_v0.6.3.json && \
    # Verify file integrity
    sudo find . -name "*.json" -exec ls -la {} \; && \
    sudo chown -R root:root /usr/local/share/vmaf

# Build FFmpeg with security optimizations
RUN git clone --depth 1 --branch n6.1 https://github.com/FFmpeg/FFmpeg.git ffmpeg && \
    cd ffmpeg && \
    # Verify repository (best effort)
    git log -1 --format="%H %s" && \
    ./configure \
        --prefix=/usr/local \
        --enable-gpl \
        --enable-version3 \
        --enable-static \
        --disable-shared \
        --disable-debug \
        --disable-ffplay \
        --disable-indev=sndio \
        --disable-outdev=sndio \
        --disable-network \
        --disable-protocols \
        --enable-protocol=file \
        --enable-protocol=pipe \
        --enable-protocol=http \
        --enable-protocol=https \
        --cc=gcc \
        --extra-cflags="-fstack-protector-strong -D_FORTIFY_SOURCE=2" \
        --extra-ldflags="-Wl,-z,relro,-z,now" \
        --enable-fontconfig \
        --enable-gnutls \
        --enable-libass \
        --enable-libfdk-aac \
        --enable-libfreetype \
        --enable-libmp3lame \
        --enable-libopus \
        --enable-libtheora \
        --enable-libvorbis \
        --enable-libvpx \
        --enable-libwebp \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libvmaf \
        --enable-libaom \
        --enable-nonfree && \
    make -j$(nproc) && \
    sudo make install && \
    # Verify binaries
    /usr/local/bin/ffmpeg -version && \
    /usr/local/bin/ffprobe -version

# =============================================================================
# Stage 3: Go Application Builder with Security
# =============================================================================
FROM golang:1.23.1-alpine@sha256:ac9c723bb5b88dfd313b4e4a9116e095e61ca39c8e9d3818eb0e6090f4dca8b9 AS go-builder

# Create build environment
RUN apk add --no-cache \
    git=2.45.2-r0 \
    ca-certificates=20240705-r0 \
    && rm -rf /var/cache/apk/*

# Create non-root build user
RUN addgroup -g 1001 appbuilder && \
    adduser -D -u 1001 -G appbuilder appbuilder

WORKDIR /build
RUN chown appbuilder:appbuilder /build

# Switch to non-root user
USER appbuilder

# Copy dependency files with proper ownership
COPY --chown=appbuilder:appbuilder go.mod go.sum ./

# Download and verify dependencies
RUN go mod download && \
    go mod verify

# Copy source code
COPY --chown=appbuilder:appbuilder . .

# Build application with security flags
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags="-s -w -extldflags '-static' -X main.version=$(date +%Y%m%d-%H%M%S) -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
    -tags netgo,osusergo \
    -trimpath \
    -o ffprobe-api \
    ./cmd/ffprobe-api

# Verify binary
RUN file ffprobe-api && \
    ldd ffprobe-api 2>&1 | grep -q "not a dynamic executable" || echo "Static binary confirmed"

# =============================================================================
# Stage 4: Security Scan (Optional)
# =============================================================================
FROM security-base AS security-scan

# Copy built artifacts for scanning
COPY --from=go-builder /build/ffprobe-api /tmp/ffprobe-api
COPY --from=ffmpeg-builder /usr/local/bin/ffmpeg /tmp/ffmpeg
COPY --from=ffmpeg-builder /usr/local/bin/ffprobe /tmp/ffprobe

# Run security scans
RUN echo "=== Running Security Scans ===" && \
    trivy filesystem --severity HIGH,CRITICAL /tmp/ || true && \
    echo "=== Security Scan Complete ==="

# =============================================================================
# Stage 5: Production Runtime (Distroless Option)
# =============================================================================
FROM gcr.io/distroless/static-debian12:nonroot AS runtime-distroless

# Copy certificates and timezone data
COPY --from=alpine:3.20 /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=alpine:3.20 /usr/share/zoneinfo /usr/share/zoneinfo

# Copy application and dependencies
COPY --from=go-builder /build/ffprobe-api /usr/local/bin/ffprobe-api
COPY --from=ffmpeg-builder /usr/local/bin/ffmpeg /usr/local/bin/ffmpeg
COPY --from=ffmpeg-builder /usr/local/bin/ffprobe /usr/local/bin/ffprobe
COPY --from=ffmpeg-builder /usr/local/share/vmaf /usr/local/share/vmaf

# Set environment
ENV FFMPEG_PATH=/usr/local/bin/ffmpeg \
    FFPROBE_PATH=/usr/local/bin/ffprobe \
    VMAF_MODEL_PATH=/usr/local/share/vmaf \
    TZ=UTC \
    LOG_LEVEL=info \
    API_PORT=8080

EXPOSE 8080
ENTRYPOINT ["/usr/local/bin/ffprobe-api"]

# =============================================================================
# Stage 6: Production Runtime (Alpine with Tools)
# =============================================================================
FROM alpine:3.20@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d AS runtime-alpine

# Install runtime dependencies with specific versions
RUN apk add --no-cache \
    ca-certificates=20240705-r0 \
    tzdata=2024a-r1 \
    curl=8.9.0-r0 \
    wget=1.24.5-r0 \
    bash=5.2.26-r0 \
    tini=0.19.0-r3 \
    jq=1.7.1-r0 \
    file=5.45-r1 \
    postgresql16-client=16.3-r0 \
    redis=7.2.5-r0 \
    && rm -rf /var/cache/apk/*

# Create application user with specific UID/GID
RUN addgroup -g 1001 ffprobe && \
    adduser -D -u 1001 -G ffprobe -s /bin/bash ffprobe

# Copy FFmpeg binaries and VMAF models
COPY --from=ffmpeg-builder /usr/local/bin/ffmpeg /usr/local/bin/ffmpeg
COPY --from=ffmpeg-builder /usr/local/bin/ffprobe /usr/local/bin/ffprobe
COPY --from=ffmpeg-builder /usr/local/share/vmaf /usr/local/share/vmaf

# Copy Go application
COPY --from=go-builder /build/ffprobe-api /usr/local/bin/ffprobe-api

# Copy production entrypoint script
COPY docker-entrypoint.production.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Create application directories with proper permissions
RUN mkdir -p \
    /app/uploads \
    /app/reports \
    /app/logs \
    /app/temp \
    /app/cache \
    /app/config \
    /app/backup \
    /app/ssl \
    /app/scripts \
    && chown -R ffprobe:ffprobe /app

# Copy configuration template
COPY --chown=ffprobe:ffprobe .env.example /app/config/env.example

# Copy scripts if they exist
COPY --chown=ffprobe:ffprobe scripts/ /app/scripts/ 2>/dev/null || true

# Set working directory
WORKDIR /app

# Switch to non-root user
USER ffprobe

# Set production environment variables
ENV FFMPEG_PATH=/usr/local/bin/ffmpeg \
    FFPROBE_PATH=/usr/local/bin/ffprobe \
    VMAF_MODEL_PATH=/usr/local/share/vmaf \
    UPLOAD_DIR=/app/uploads \
    REPORTS_DIR=/app/reports \
    TEMP_DIR=/app/temp \
    CACHE_DIR=/app/cache \
    BACKUP_DIR=/app/backup \
    LOG_LEVEL=info \
    API_PORT=8080 \
    GO_ENV=production \
    PATH="/usr/local/bin:/usr/bin:/bin:/app/scripts" \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    TZ=UTC

# Expose port
EXPOSE 8080

# Add comprehensive health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use tini as init system
ENTRYPOINT ["tini", "--", "/usr/local/bin/docker-entrypoint.sh"]

# Default command
CMD ["/usr/local/bin/ffprobe-api"]

# =============================================================================
# Default Production Target
# =============================================================================
FROM runtime-alpine AS production

# Add build metadata
LABEL \
    org.opencontainers.image.title="FFprobe API" \
    org.opencontainers.image.description="Production-grade FFprobe API with AI analysis" \
    org.opencontainers.image.version="1.0.0" \
    org.opencontainers.image.authors="Rendiff <dev@rendiff.dev>" \
    org.opencontainers.image.source="https://github.com/rendiffdev/ffprobe-api" \
    org.opencontainers.image.documentation="https://github.com/rendiffdev/ffprobe-api/docs" \
    org.opencontainers.image.licenses="MIT" \
    org.opencontainers.image.base.name="alpine:3.20" \
    maintainer="production-team@your-org.com" \
    security.scan="trivy" \
    build.date="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

# Production-specific configurations
ENV DOCKER_RUNTIME=production \
    SECURITY_HARDENED=true \
    MONITORING_ENABLED=true