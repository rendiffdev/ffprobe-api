# Production Configuration Override
# Enhanced security, performance, and reliability for production deployments
# Usage: docker compose -f compose.yml -f compose.production.yml up -d

services:
  ffprobe-api:
    build:
      context: .
      dockerfile: Dockerfile.production
    environment:
      - GO_ENV=production
      - GIN_MODE=release
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '1.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=2G,mode=1777
      - /app/temp:size=5G,mode=1777
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  postgres:
    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_LOG_STATEMENT=ddl
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=1000
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: >
      postgres
      -c log_statement=ddl
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c shared_preload_libraries=pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./docker/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
      - ./migrations/001_initial_schema.up.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro

  redis:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 800mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300

  ollama:
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '2.0'
    environment:
      - OLLAMA_KEEP_ALIVE=1h
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_NUM_PARALLEL=2

  prometheus:
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=20GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SERVER_ROOT_URL=https://your-domain.com/grafana
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

volumes:
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind  
      device: ${DATA_PATH:-./data}/postgres-backups