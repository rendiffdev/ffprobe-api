#!/bin/bash

# FFprobe API Quick Setup Script
# Minimal interactive setup for development and testing

set -euo pipefail

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${GREEN}[SETUP] $1${NC}"; }
info() { echo -e "${BLUE}[INFO] $1${NC}"; }
warn() { echo -e "${YELLOW}[WARN] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}"; exit 1; }

# Quick setup banner
cat << "EOF"
╔══════════════════════════════════════════════════════════════════════════════╗
║                            🎬 FFprobe API Quick Setup                        ║
║                                                                              ║
║  This script will help you get FFprobe API running quickly with             ║
║  minimal configuration. For advanced setup, use scripts/install.sh          ║
╚══════════════════════════════════════════════════════════════════════════════╝
EOF

echo ""

# Check Docker
if ! command -v docker >/dev/null 2>&1; then
    error "Docker is required but not installed. Please install Docker first."
fi

if ! command -v "docker compose" >/dev/null 2>&1; then
    error "Docker Compose v2 is required. Please update Docker."
fi

log "Docker and Docker Compose found ✅"

# Quick configuration
echo ""
info "🔧 Quick Configuration Setup"
echo ""

# Setup mode
echo "Select setup mode:"
echo "1. 🔧 Development (Local development, no auth, debug logging)"
echo "2. 🧪 Demo (Demo mode with basic auth, sample data)"
echo "3. 🏭 Production (Full security, SSL ready)"
echo ""

while true; do
    read -p "Choose mode (1-3): " mode_choice
    case $mode_choice in
        1)
            SETUP_MODE="development"
            break
            ;;
        2)
            SETUP_MODE="demo"
            break
            ;;
        3)
            SETUP_MODE="production"
            break
            ;;
        *)
            warn "Please choose 1, 2, or 3"
            ;;
    esac
done

log "Selected: $SETUP_MODE mode"

# Generate secrets
log "Generating secure secrets..."
API_KEY=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
JWT_SECRET=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
DB_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
REDIS_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
GRAFANA_PASSWORD=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-12)

# Create environment file
log "Creating environment configuration..."

case $SETUP_MODE in
    "development")
        cat > .env << EOF
# FFprobe API Development Configuration
# Generated by quick setup on $(date)

# Development Mode Settings
ENVIRONMENT=development
LOG_LEVEL=debug
ENABLE_AUTH=false
ENABLE_RATE_LIMIT=false
ENABLE_CSRF=false

# Network
API_PORT=8080

# Security (for development)
API_KEY=$API_KEY
JWT_SECRET=$JWT_SECRET

# Database
POSTGRES_PASSWORD=$DB_PASSWORD
POSTGRES_USER=ffprobe
POSTGRES_DB=ffprobe_api

# Redis
REDIS_PASSWORD=$REDIS_PASSWORD

# Monitoring
GRAFANA_PASSWORD=$GRAFANA_PASSWORD
GRAFANA_USER=admin

# File Storage
DATA_PATH=./data
MAX_FILE_SIZE=53687091200
MAX_CONCURRENT_JOBS=4
EOF
        ;;
        
    "demo")
        cat > .env << EOF
# FFprobe API Demo Configuration
# Generated by quick setup on $(date)

# Demo Mode Settings
ENVIRONMENT=staging
LOG_LEVEL=info
ENABLE_AUTH=true
ENABLE_RATE_LIMIT=true
ENABLE_CSRF=false

# Network
API_PORT=8080

# Security
API_KEY=$API_KEY
JWT_SECRET=$JWT_SECRET

# Database
POSTGRES_PASSWORD=$DB_PASSWORD
POSTGRES_USER=ffprobe
POSTGRES_DB=ffprobe_api

# Redis
REDIS_PASSWORD=$REDIS_PASSWORD

# Rate Limiting
RATE_LIMIT_PER_MINUTE=100
RATE_LIMIT_PER_HOUR=2000
RATE_LIMIT_PER_DAY=20000

# Monitoring
GRAFANA_PASSWORD=$GRAFANA_PASSWORD
GRAFANA_USER=admin

# File Storage
DATA_PATH=./data
MAX_FILE_SIZE=53687091200
MAX_CONCURRENT_JOBS=4
EOF
        ;;
        
    "production")
        echo ""
        read -p "🌐 Enter your domain name (e.g., api.yourcompany.com): " DOMAIN_NAME
        read -p "📧 Enter email for SSL certificates: " EMAIL_ADDRESS
        
        cat > .env << EOF
# FFprobe API Production Configuration
# Generated by quick setup on $(date)

# Production Mode Settings
ENVIRONMENT=production
LOG_LEVEL=warn
ENABLE_AUTH=true
ENABLE_RATE_LIMIT=true
ENABLE_CSRF=true

# Network
API_PORT=8080
DOMAIN_NAME=$DOMAIN_NAME
HTTP_PORT=80
HTTPS_PORT=443

# Security
API_KEY=$API_KEY
JWT_SECRET=$JWT_SECRET

# Database
POSTGRES_PASSWORD=$DB_PASSWORD
POSTGRES_USER=ffprobe
POSTGRES_DB=ffprobe_api

# Redis
REDIS_PASSWORD=$REDIS_PASSWORD

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000
RATE_LIMIT_PER_DAY=10000

# Monitoring
GRAFANA_PASSWORD=$GRAFANA_PASSWORD
GRAFANA_USER=admin

# File Storage
DATA_PATH=./data
MAX_FILE_SIZE=53687091200
MAX_CONCURRENT_JOBS=4

# SSL Configuration
EMAIL=$EMAIL_ADDRESS
EOF
        ;;
esac

# Create data directories
log "Creating data directories..."
mkdir -p data/{postgres,redis,uploads,reports,models,logs,temp,cache,prometheus,grafana,backup}

# Set permissions
chmod 600 .env
chmod -R 755 data/

# Start services
log "Starting FFprobe API services..."

case $SETUP_MODE in
    "development")
        info "Starting in development mode..."
        docker compose -f compose.yml -f compose.dev.yml up -d --build
        ;;
    "demo"|"production")
        info "Starting in production mode..."
        docker compose -f compose.yml -f compose.prod.yml up -d --build
        ;;
esac

# Wait for services
log "Waiting for services to start..."
sleep 30

# Health check
info "Checking service health..."
if curl -f -s http://localhost:8080/health >/dev/null 2>&1; then
    log "✅ FFprobe API is running!"
else
    warn "⚠️  API may still be starting. Check with: docker compose logs ffprobe-api"
fi

# Show access information
echo ""
echo "╔══════════════════════════════════════════════════════════════════════════════╗"
echo "║                          🎉 Setup Complete!                                 ║"
echo "╚══════════════════════════════════════════════════════════════════════════════╝"
echo ""

info "🌐 Access Information:"
echo "   API Endpoint:     http://localhost:8080"
echo "   Health Check:     http://localhost:8080/health"
echo "   Grafana:          http://localhost:3000"
echo "   Prometheus:       http://localhost:9090"

if [[ "$SETUP_MODE" == "development" ]]; then
    echo "   DB Admin:         http://localhost:8090"
    echo "   Redis Commander:  http://localhost:8091"
fi

echo ""
info "🔐 Credentials:"
echo "   API Key:          $API_KEY"
echo "   Grafana User:     admin"
echo "   Grafana Password: $GRAFANA_PASSWORD"

echo ""
info "🚀 Quick Commands:"
echo "   Test API:         curl -H \"X-API-Key: $API_KEY\" http://localhost:8080/health"
echo "   View logs:        docker compose logs -f ffprobe-api"
echo "   Stop services:    docker compose down"

if [[ "$SETUP_MODE" == "development" ]]; then
    echo "   Restart dev:      docker compose -f compose.yml -f compose.dev.yml up -d"
else
    echo "   Restart prod:     docker compose -f compose.yml -f compose.prod.yml up -d"
fi

echo ""
info "📚 Documentation:"
echo "   Full docs:        ./docs/"
echo "   API examples:     ./docs/tutorials/api_usage.md"
echo "   Advanced setup:   ./scripts/install.sh"

echo ""
log "🎬 FFprobe API is ready to analyze your media files!"
echo ""

# Save setup info
cat > SETUP_INFO.md << EOF
# FFprobe API Setup Information

**Setup Mode:** $SETUP_MODE  
**Setup Date:** $(date)  
**API Key:** $API_KEY  

## Access URLs
- API: http://localhost:8080
- Grafana: http://localhost:3000 (admin/$GRAFANA_PASSWORD)
- Prometheus: http://localhost:9090

## Quick Commands
\`\`\`bash
# Test API
curl -H "X-API-Key: $API_KEY" http://localhost:8080/health

# View logs
docker compose logs -f ffprobe-api

# Stop services
docker compose down
\`\`\`

## Configuration
All settings are stored in \`.env\` file. You can modify and restart services to apply changes.

For advanced configuration, use \`./scripts/install.sh\`.
EOF

info "Setup information saved to SETUP_INFO.md"