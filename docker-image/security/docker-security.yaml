# FFprobe API - Docker Security Configuration
# Comprehensive security policies and configurations for production deployment

# Security Compose Override for Production
# Usage: docker-compose -f compose.production.yaml -f security/docker-security.yaml up

version: '3.9'

services:
  # Enhanced Security Configuration for API Service
  api:
    security_opt:
      # Disable new privilege escalation
      - no-new-privileges:true
      # Use custom seccomp profile
      - seccomp:./security/seccomp-profile.json
      # Enable AppArmor (if available)
      - apparmor:docker-ffprobe-api
    
    # Drop all capabilities and add only required ones
    cap_drop:
      - ALL
    cap_add:
      - CHOWN          # For changing file ownership
      - DAC_OVERRIDE   # For accessing files with different permissions
      - FOWNER         # For file operations
      - SETGID         # For group operations
      - SETUID         # For user operations
      - NET_BIND_SERVICE # For binding to ports < 1024 (if needed)
    
    # Read-only root filesystem
    read_only: true
    
    # Temporary filesystems for writable areas
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100M,uid=65532,gid=65532
      - /var/run:rw,noexec,nosuid,size=10M,uid=65532,gid=65532
      - /var/lock:rw,noexec,nosuid,size=10M,uid=65532,gid=65532
    
    # Resource limits for security
    deploy:
      resources:
        limits:
          # Prevent resource exhaustion attacks
          cpus: '2.0'
          memory: 2G
          pids: 100          # Limit process count
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Process limits
    ulimits:
      nproc: 100             # Max processes
      nofile: 1024           # Max open files
      memlock: 67108864      # Max locked memory (64MB)
    
    # Environment variable security
    environment:
      # Security headers
      SECURE_HEADERS_ENABLED: true
      HSTS_MAX_AGE: 31536000
      CONTENT_SECURITY_POLICY: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
      X_FRAME_OPTIONS: DENY
      X_CONTENT_TYPE_OPTIONS: nosniff
      REFERRER_POLICY: strict-origin-when-cross-origin
      
      # Security features
      ENABLE_CSRF_PROTECTION: true
      ENABLE_RATE_LIMITING: true
      ENABLE_REQUEST_LOGGING: true
      ENABLE_AUDIT_LOGGING: true
      
      # Disable debug features in production
      DEBUG: false
      ENABLE_PPROF: false
      ENABLE_METRICS_DEBUG: false
    
    # Health check with security considerations
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Network security
    networks:
      - frontend
      - backend
    dns:
      - 1.1.1.1    # Cloudflare DNS
      - 1.0.0.1    # Cloudflare DNS secondary
    
    # Additional security labels
    labels:
      - "security.scan.enabled=true"
      - "security.policy=production"
      - "compliance.level=high"

  # Enhanced Security for Valkey Cache
  valkey:
    security_opt:
      - no-new-privileges:true
      - seccomp:./security/seccomp-profile-valkey.json
    
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50M
    
    # Valkey-specific security configuration
    command: >
      valkey-server
      --requirepass-file /run/secrets/valkey_password
      --protected-mode yes
      --port 0
      --unixsocket /tmp/valkey.sock
      --unixsocketperm 700
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
      --maxclients 10000
      --bind 127.0.0.1
      --save 900 1 --save 300 10 --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes
      --replica-lazy-flush yes

  # Enhanced Security for Ollama AI Service
  ollama:
    security_opt:
      - no-new-privileges:true
      - seccomp:./security/seccomp-profile-ollama.json
    
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    
    # Ollama needs more flexibility for AI model operations
    read_only: false
    
    # Resource limits for AI workloads
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
          pids: 50
        reservations:
          cpus: '2.0'
          memory: 4G
    
    environment:
      # Security settings for AI service
      OLLAMA_HOST: 127.0.0.1:11434
      OLLAMA_ORIGINS: "http://api:8080,https://api.${DOMAIN:-localhost}"
      OLLAMA_DEBUG: false
      OLLAMA_FLASH_ATTENTION: true
      OLLAMA_KEEP_ALIVE: 5m

  # Enhanced Security for Traefik Reverse Proxy
  traefik:
    security_opt:
      - no-new-privileges:true
      - seccomp:./security/seccomp-profile-traefik.json
    
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # Required for binding to ports 80/443
    
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50M
    
    # Additional Traefik security configuration
    command:
      # ... existing command options ...
      # Security enhancements
      - "--api.dashboard=true"
      - "--api.debug=false"
      - "--api.insecure=false"
      - "--global.sendAnonymousUsage=false"
      
      # Security middleware
      - "--middlewares.secure-headers.headers.accessControlAllowMethods=GET,POST,PUT,DELETE"
      - "--middlewares.secure-headers.headers.accessControlMaxAge=100"
      - "--middlewares.secure-headers.headers.addVaryHeader=true"
      - "--middlewares.secure-headers.headers.hostsProxyHeaders=X-Forwarded-Host"
      - "--middlewares.secure-headers.headers.sslProxyHeaders.X-Forwarded-Proto=https"
      
      # Rate limiting
      - "--middlewares.api-ratelimit.ratelimit.average=100"
      - "--middlewares.api-ratelimit.ratelimit.burst=50"
      - "--middlewares.api-ratelimit.ratelimit.period=1m"

# Security-focused network configuration
networks:
  frontend:
    driver: overlay
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "security.level=high"
      - "network.encrypted=true"

  backend:
    driver: overlay
    internal: true
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    labels:
      - "security.level=critical"
      - "network.internal=true"
      - "network.encrypted=true"

# Secure secrets configuration
secrets:
  valkey_password:
    file: ./secrets/valkey_password.txt
    labels:
      - "security.classification=confidential"
      - "security.rotation=monthly"

  jwt_secret:
    file: ./secrets/jwt_secret.txt
    labels:
      - "security.classification=secret"
      - "security.rotation=weekly"

  csrf_secret:
    file: ./secrets/csrf_secret.txt
    labels:
      - "security.classification=confidential"
      - "security.rotation=monthly"

  api_key:
    file: ./secrets/api_key.txt
    labels:
      - "security.classification=secret"
      - "security.rotation=monthly"

  grafana_password:
    file: ./secrets/grafana_password.txt
    labels:
      - "security.classification=confidential"
      - "security.rotation=quarterly"

  backup_encryption_key:
    file: ./secrets/backup_encryption_key.txt
    labels:
      - "security.classification=top-secret"
      - "security.rotation=yearly"

  ssl_certificate:
    file: ./secrets/ssl_certificate.pem
    labels:
      - "security.classification=public"
      - "security.type=certificate"

  ssl_private_key:
    file: ./secrets/ssl_private_key.pem
    labels:
      - "security.classification=secret"
      - "security.type=private-key"

# Secure volumes with proper permissions
volumes:
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind,nodev,nosuid
      device: ${DATA_PATH}/app
    labels:
      - "security.mount_options=nodev,nosuid"
      - "security.backup=encrypted"

  valkey_data:
    driver: local
    driver_opts:
      type: none
      o: bind,nodev,nosuid,noexec
      device: ${DATA_PATH}/valkey
    labels:
      - "security.mount_options=nodev,nosuid,noexec"
      - "security.backup=encrypted"

# Security configurations for different deployment modes
configs:
  security_policy:
    file: ./security/security-policy.json
    labels:
      - "config.type=security-policy"
      - "config.version=v1"

  audit_config:
    file: ./security/audit-config.yaml
    labels:
      - "config.type=audit"
      - "config.compliance=required"

# Security monitoring and compliance
x-security-monitoring: &security-monitoring
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "5"
      labels: "service,security,compliance"
      tag: "security.{{.ImageName}}|{{.Name}}|{{.ImageFullID}}"

x-compliance-labels: &compliance-labels
  labels:
    - "compliance.framework=SOC2"
    - "compliance.framework=PCI-DSS"
    - "compliance.framework=GDPR"
    - "security.scan.required=true"
    - "security.monitoring=enabled"