version: '3.8'

# FFprobe API Standalone Deployment
# Zero-dependency production deployment with optional services

services:
  # Main Standalone API (Everything built-in)
  ffprobe-api:
    image: rendiffdev/ffprobe-api-standalone:latest
    container_name: ffprobe-api-standalone
    ports:
      - "${API_PORT:-8080}:8080"
      - "${METRICS_PORT:-9090}:9090"  # Metrics endpoint
    environment:
      # Performance Tuning
      - WORKER_POOL_SIZE=${WORKER_POOL_SIZE:-12}
      - PROCESSING_TIMEOUT=${PROCESSING_TIMEOUT:-900}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-21474836480}  # 20GB
      - MAX_CONCURRENT_UPLOADS=${MAX_CONCURRENT_UPLOADS:-15}
      
      # Security Settings
      - ENABLE_AUTH=${ENABLE_AUTH:-false}
      - API_KEY=${API_KEY:-}
      - JWT_SECRET=${JWT_SECRET:-}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-120}
      - RATE_LIMIT_PER_HOUR=${RATE_LIMIT_PER_HOUR:-7200}
      
      # Feature Toggles
      - ENABLE_LOCAL_LLM=${ENABLE_LOCAL_LLM:-true}
      - ENABLE_ADVANCED_QC=${ENABLE_ADVANCED_QC:-true}
      - ENABLE_BATCH_PROCESSING=${ENABLE_BATCH_PROCESSING:-true}
      
      # Logging & Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      
      # Auto-cleanup Settings
      - AUTO_CLEANUP_ENABLED=${AUTO_CLEANUP_ENABLED:-true}
      - CLEANUP_UPLOADS_AFTER_HOURS=${CLEANUP_UPLOADS_AFTER_HOURS:-48}
      - CLEANUP_REPORTS_AFTER_DAYS=${CLEANUP_REPORTS_AFTER_DAYS:-14}
      - CLEANUP_TEMP_AFTER_HOURS=${CLEANUP_TEMP_AFTER_HOURS:-2}
    volumes:
      # Persistent data volumes
      - ./data/uploads:/app/uploads
      - ./data/reports:/app/reports
      - ./data/db:/app/db
      - ./data/logs:/app/logs
      - ./data/backup:/app/backup
      # Temporary processing space (optional, for performance)
      - /tmp/ffprobe-temp:/app/temp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Allow time for AI models to load
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 6G
        reservations:
          cpus: '4'
          memory: 3G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - ffprobe-network

  # Optional: Reverse Proxy with SSL (Enable with --profile nginx)
  nginx:
    image: nginx:alpine
    container_name: ffprobe-nginx
    profiles: ["nginx", "production"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      - ffprobe-api
    restart: unless-stopped
    networks:
      - ffprobe-network

  # Optional: Backup Service (Enable with --profile backup)
  backup:
    image: alpine:3.20
    container_name: ffprobe-backup
    profiles: ["backup"]
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_COMPRESSION=${BACKUP_COMPRESSION:-true}
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: |
      sh -c '
      echo "Installing backup tools..."
      apk add --no-cache docker-cli tar gzip

      # Create backup script
      cat > /backup.sh << "EOL"
      #!/bin/sh
      DATE=$$(date +%Y%m%d_%H%M%S)
      BACKUP_DIR="/backups/$$DATE"
      mkdir -p "$$BACKUP_DIR"
      
      echo "[$$(date)] Starting backup..."
      
      # Stop API for consistent backup
      docker stop ffprobe-api-standalone || echo "API not running"
      
      # Backup database
      if [ -f "/data/db/ffprobe.db" ]; then
        cp /data/db/ffprobe.db "$$BACKUP_DIR/database.db"
        echo "Database backed up"
      fi
      
      # Backup configuration and logs
      tar -czf "$$BACKUP_DIR/config_logs.tar.gz" -C /data logs/ 2>/dev/null || true
      
      # Backup recent uploads (last 7 days)
      find /data/uploads -mtime -7 -type f | tar -czf "$$BACKUP_DIR/recent_uploads.tar.gz" -T - 2>/dev/null || true
      
      # Restart API
      docker start ffprobe-api-standalone
      
      # Cleanup old backups
      find /backups -type d -mtime +$$BACKUP_RETENTION_DAYS -exec rm -rf {} + 2>/dev/null || true
      
      echo "[$$(date)] Backup completed: $$BACKUP_DIR"
      EOL
      
      chmod +x /backup.sh
      
      # Set up cron job
      echo "$$BACKUP_SCHEDULE /backup.sh >> /var/log/backup.log 2>&1" | crontab -
      
      # Run crond
      crond -f -l 2
      '
    restart: unless-stopped
    networks:
      - ffprobe-network

  # Optional: Monitoring with Prometheus (Enable with --profile monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ffprobe-prometheus
    profiles: ["monitoring", "production"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    restart: unless-stopped
    networks:
      - ffprobe-network

  # Optional: Grafana Dashboard (Enable with --profile monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: ffprobe-grafana
    profiles: ["monitoring", "production"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=prometheus-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ffprobe-network

  # Optional: Log Aggregation (Enable with --profile logging)
  loki:
    image: grafana/loki:latest
    container_name: ffprobe-loki
    profiles: ["logging"]
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    restart: unless-stopped
    networks:
      - ffprobe-network

# Networks
networks:
  ffprobe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes for optional services
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local