# FFprobe API - Production-Optimized Multi-Stage Docker Build
# Security-hardened, performance-optimized container for production deployment
# Supports AMD64/ARM64 with minimal attack surface and enhanced monitoring

# =============================================================================
# Base Security-Hardened Alpine Image
# =============================================================================
FROM alpine:3.19 AS base
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    tini \
    && addgroup -g 65532 -S nonroot \
    && adduser -u 65532 -S nonroot -G nonroot

# =============================================================================
# Dependencies Stage - Cached Layer Optimization
# =============================================================================
FROM golang:1.23-alpine AS deps
WORKDIR /src
RUN apk add --no-cache git ca-certificates gcc musl-dev sqlite-dev
COPY go.mod go.sum ./
RUN go mod download -x && go mod verify

# =============================================================================
# Build Stage - Optimized Go Compilation
# =============================================================================
FROM deps AS builder
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG VERSION=latest
ARG COMMIT=unknown
ARG BUILD_DATE

# Copy source code
COPY . .

# Build with security and performance optimizations
RUN CGO_ENABLED=1 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build \
    -ldflags="-w -s -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildDate=${BUILD_DATE} -extldflags '-static'" \
    -trimpath \
    -buildmode=pie \
    -tags="netgo,osusergo,static_build" \
    -installsuffix=netgo \
    -o ffprobe-api \
    ./cmd/ffprobe-api

# Verify binary
RUN file ffprobe-api && ldd ffprobe-api || true

# =============================================================================
# FFmpeg Stage - Latest Static Builds with Security Verification
# =============================================================================
FROM alpine:3.19 AS ffmpeg
ARG TARGETARCH

# Install verification tools
RUN apk add --no-cache curl tar xz file gnupg

# Download and verify FFmpeg with checksum validation
RUN ARCH_MAP_amd64="linux64" ARCH_MAP_arm64="linuxarm64" && \
    FFMPEG_ARCH=$(eval echo \$ARCH_MAP_${TARGETARCH}) && \
    echo "Building for architecture: ${TARGETARCH} -> ${FFMPEG_ARCH}" && \
    if [ -z "${FFMPEG_ARCH}" ]; then \
        echo "Unsupported architecture: ${TARGETARCH}"; exit 1; \
    fi && \
    FFMPEG_URL="https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-${FFMPEG_ARCH}-gpl.tar.xz" && \
    echo "Downloading FFmpeg from: ${FFMPEG_URL}" && \
    curl -fsSL "${FFMPEG_URL}" -o ffmpeg.tar.xz && \
    file ffmpeg.tar.xz && \
    tar -tf ffmpeg.tar.xz | head -10 && \
    tar -xJ --strip-components=1 -C /tmp/ -f ffmpeg.tar.xz && \
    ls -la /tmp/bin/ && \
    file /tmp/bin/ffmpeg /tmp/bin/ffprobe && \
    /tmp/bin/ffmpeg -version && \
    /tmp/bin/ffprobe -version

# =============================================================================
# Runtime Stage - Minimal Secure Production Image
# =============================================================================
FROM base AS production

# Security metadata
LABEL maintainer="FFprobe API Team" \
      org.opencontainers.image.title="FFprobe API" \
      org.opencontainers.image.description="Production-grade FFprobe API service" \
      org.opencontainers.image.vendor="FFprobe API" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/ffprobe-api/ffprobe-api" \
      security.scan.enabled="true"

# Install minimal runtime dependencies with security updates
RUN apk add --no-cache \
    ca-certificates \
    curl \
    sqlite \
    && apk upgrade \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Create secure application structure
WORKDIR /app
RUN mkdir -p \
    data logs temp cache uploads reports migrations \
    && chown -R nonroot:nonroot /app

# Copy FFmpeg binaries with proper permissions
COPY --from=ffmpeg --chown=nonroot:nonroot /tmp/bin/ffmpeg /usr/local/bin/
COPY --from=ffmpeg --chown=nonroot:nonroot /tmp/bin/ffprobe /usr/local/bin/
RUN chmod 755 /usr/local/bin/ffmpeg /usr/local/bin/ffprobe

# Copy application binary and migrations
COPY --from=builder --chown=nonroot:nonroot /src/ffprobe-api /app/
COPY --from=builder --chown=nonroot:nonroot /src/migrations /app/migrations/
RUN chmod 755 /app/ffprobe-api

# Create optimized health check script
COPY --chown=nonroot:nonroot <<'EOF' /app/healthcheck.sh
#!/bin/sh
set -e
# Comprehensive health check with timeout and retries
timeout 5 curl -f -H "User-Agent: HealthCheck/1.0" \
    --max-time 3 --retry 1 --retry-delay 1 \
    "http://localhost:${API_PORT:-8080}/health" || exit 1
EOF
RUN chmod 755 /app/healthcheck.sh

# Security hardening: remove unnecessary packages and files
RUN apk del curl \
    && find /app -type f -perm /022 -exec chmod go-w {} + \
    && find /app -type d -perm /022 -exec chmod go-w {} +

# Security: non-root user, no new privileges, minimal capabilities
USER nonroot:nonroot

# Secure defaults - production environment
ENV GO_ENV=production \
    GIN_MODE=release \
    API_PORT=8080 \
    API_HOST=0.0.0.0 \
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    DB_TYPE=sqlite \
    DB_PATH=/app/data/ffprobe.db \
    UPLOAD_DIR=/app/uploads \
    REPORTS_DIR=/app/reports \
    TEMP_DIR=/app/temp \
    CACHE_DIR=/app/cache \
    FFMPEG_PATH=/usr/local/bin/ffmpeg \
    FFPROBE_PATH=/usr/local/bin/ffprobe \
    # Security settings
    ENABLE_AUTH=true \
    ENABLE_RATE_LIMIT=true \
    ENABLE_CIRCUIT_BREAKER=true \
    ENABLE_CSRF=true \
    # Performance settings
    WORKER_POOL_SIZE=8 \
    MAX_CONCURRENT_JOBS=4 \
    REQUEST_TIMEOUT=30s \
    # Monitoring
    METRICS_ENABLED=true \
    TRACING_ENABLED=true

# Network exposure
EXPOSE 8080

# Enhanced health check with proper intervals
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 --start-interval=5s \
    CMD ["/app/healthcheck.sh"]

# Use tini for proper signal handling and zombie reaping
ENTRYPOINT ["/sbin/tini", "--"]

# Application startup
CMD ["/app/ffprobe-api"]

# =============================================================================
# Development Stage - Enhanced Development Environment
# =============================================================================
FROM golang:1.23-alpine AS development

# Install development tools
RUN apk add --no-cache \
    git ca-certificates gcc musl-dev sqlite-dev \
    curl vim bash fish make \
    ffmpeg \
    && go install github.com/cosmtrek/air@latest \
    && go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

WORKDIR /app

# Copy dependencies
COPY go.mod go.sum ./
RUN go mod download

# Development environment variables
ENV GO_ENV=development \
    GIN_MODE=debug \
    API_PORT=8080 \
    LOG_LEVEL=debug \
    LOG_FORMAT=console \
    ENABLE_AUTH=false \
    HOT_RELOAD=true

EXPOSE 8080

# Health check for development
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=2 \
    CMD curl -f http://localhost:8080/health || exit 1

# Development with hot reload
CMD ["air", "-c", ".air.toml"]

# =============================================================================
# Test Stage - Comprehensive Testing Environment
# =============================================================================
FROM golang:1.23-alpine AS test

# Install test dependencies
RUN apk add --no-cache \
    git ca-certificates gcc musl-dev sqlite-dev \
    ffmpeg curl \
    && go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest

WORKDIR /app
COPY . .
RUN go mod download

# Run comprehensive tests with coverage
RUN go test -v -race -coverprofile=coverage.out \
    -covermode=atomic -coverpkg=./... ./... 2>&1 | \
    gotestfmt -showteamcity

# Generate coverage reports
RUN go tool cover -html=coverage.out -o coverage.html && \
    go tool cover -func=coverage.out

# Test artifacts available at /app/coverage.*

# =============================================================================
# Minimal Stage - Ultra-Minimal Production Image
# =============================================================================
FROM scratch AS minimal

# Essential certificates and timezone data
COPY --from=alpine:3.19 /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=alpine:3.19 /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=alpine:3.19 /etc/passwd /etc/passwd
COPY --from=alpine:3.19 /etc/group /etc/group

# Application and FFmpeg binaries
COPY --from=builder /src/ffprobe-api /ffprobe-api
COPY --from=ffmpeg /tmp/bin/ffmpeg /usr/local/bin/ffmpeg
COPY --from=ffmpeg /tmp/bin/ffprobe /usr/local/bin/ffprobe

# Migrations
COPY --from=builder /src/migrations /migrations

# Environment variables for minimal image
ENV PATH="/usr/local/bin:$PATH" \
    GO_ENV=production \
    GIN_MODE=release \
    FFMPEG_PATH=/usr/local/bin/ffmpeg \
    FFPROBE_PATH=/usr/local/bin/ffprobe

EXPOSE 8080

# Direct execution (no init system in scratch)
ENTRYPOINT ["/ffprobe-api"]

# =============================================================================
# Security Scanning Stage - Vulnerability Assessment
# =============================================================================
FROM production AS security-scan

# Re-add curl for security scanning (removed in production layer)
USER root
RUN apk add --no-cache curl trivy

# Run security scans
RUN trivy fs --exit-code 0 --severity HIGH,CRITICAL /app || true

# Switch back to non-root
USER nonroot:nonroot