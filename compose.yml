# Docker Compose file for FFprobe API
# Modern Compose specification
# Usage: docker compose up
# For development: docker compose -f compose.yml -f compose.dev.yml up
# For production: docker compose -f compose.yml -f compose.prod.yml up

# Note: version field is obsolete in modern Docker Compose

services:
  # Main API service
  ffprobe-api:
    build:
      context: .
      dockerfile: Dockerfile
    # container_name: ffprobe-api # Removed for production scaling
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ffprobe_api
      - POSTGRES_USER=ffprobe
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password_change_this}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_redis_pass}
      - LOG_LEVEL=info
      - API_KEY=${API_KEY:-dev_api_key_change_this_minimum_32_chars}
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_change_this_minimum_32_chars}
      - FFMPEG_PATH=/usr/local/bin/ffmpeg
      - FFPROBE_PATH=/usr/local/bin/ffprobe
      - VMAF_MODEL_PATH=/usr/local/share/vmaf
      - UPLOAD_DIR=/app/uploads
      - REPORTS_DIR=/app/reports
      - MAX_FILE_SIZE=53687091200
      - ENABLE_AUTH=true
      - ENABLE_RATE_LIMIT=true
      - RATE_LIMIT_PER_MINUTE=60
      - RATE_LIMIT_PER_HOUR=1000
      - RATE_LIMIT_PER_DAY=10000
      - OLLAMA_URL=${OLLAMA_URL:-http://ollama:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-phi3:mini}
      - ENABLE_LOCAL_LLM=${ENABLE_LOCAL_LLM:-true}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
        required: true
      redis:
        condition: service_healthy
        required: true
      ollama:
        condition: service_healthy
        required: false
    volumes:
      - uploads_data:/app/uploads
      - reports_data:/app/reports
      - models_data:/app/models
      - logs_data:/app/logs
      - temp_data:/app/temp
      - cache_data:/app/cache
      - backup_data:/app/backup
    restart: unless-stopped
    networks:
      - ffprobe-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:size=1G,mode=1777
    user: "1001:1001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:16.1-alpine
    container_name: ffprobe-postgres
    environment:
      - POSTGRES_DB=ffprobe_api
      - POSTGRES_USER=ffprobe
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password_change_this}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
      - ./migrations/001_initial_schema.up.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./migrations/005_create_quality_metrics_tables.up.sql:/docker-entrypoint-initdb.d/02-quality.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ffprobe -d ffprobe_api"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - ffprobe-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "999:999"

  # Redis cache
  redis:
    image: redis:7.2.4-alpine
    container_name: ffprobe-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_pass}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-dev_redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - ffprobe-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "999:999"

  # Prometheus (monitoring)
  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: ffprobe-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
    restart: unless-stopped
    networks:
      - ffprobe-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana (visualization)
  grafana:
    image: grafana/grafana:10.3.3
    container_name: ffprobe-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_this}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - ffprobe-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "472:472"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Ollama (Local LLM Service)
  ollama:
    image: ollama/ollama:latest
    container_name: ffprobe-ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_MODELS=${OLLAMA_MODELS_PATH:-/root/.ollama/models}
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_QUEUE=128
    volumes:
      - ollama_data:/root/.ollama
      - ./docker/ollama-entrypoint.sh:/ollama-entrypoint.sh:ro
    restart: unless-stopped
    networks:
      - ffprobe-network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    entrypoint: ["/ollama-entrypoint.sh"]
    # Note: For GPU support, uncomment below and ensure nvidia-docker is installed
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  reports_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/reports
  models_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/models
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs
  temp_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/temp
  cache_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/cache
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/backup
  ollama_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/ollama

# Custom network for service communication
networks:
  ffprobe-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: ffprobe-br
    ipam:
      config:
        - subnet: 172.20.0.0/16